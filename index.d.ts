/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface TextMetrics {
  width: number
  actualBoundingBoxLeft: number
  actualBoundingBoxRight: number
  fontBoundingBoxAscent: number
  fontBoundingBoxDescent: number
  actualBoundingBoxAscent: number
  actualBoundingBoxDescent: number
  emHeightAscent: number
  emHeightDescent: number
  hangingBaseline: number
  alphabeticBaseline: number
  ideographicBaseline: number
}
export const enum CompositeOperation {
  SourceOver = 'SourceOver',
  SourceIn = 'SourceIn',
  SourceOut = 'SourceOut',
  SourceAtop = 'SourceAtop',
  DestinationOver = 'DestinationOver',
  DestinationIn = 'DestinationIn',
  DestinationOut = 'DestinationOut',
  DestinationAtop = 'DestinationAtop',
  Lighter = 'Lighter',
  Copy = 'Copy',
  Xor = 'Xor',
  Multiply = 'Multiply',
  Screen = 'Screen',
  Overlay = 'Overlay',
  Darken = 'Darken',
  Lighten = 'Lighten',
  ColorDodge = 'ColorDodge',
  ColorBurn = 'ColorBurn',
  HardLight = 'HardLight',
  SoftLight = 'SoftLight',
  Difference = 'Difference',
  Exclusion = 'Exclusion'
}
export const enum LineCap {
  Butt = 'Butt',
  Round = 'Round',
  Square = 'Square'
}
export const enum LineJoin {
  Miter = 'Miter',
  Round = 'Round',
  Bevel = 'Bevel'
}
export const enum TextAlign {
  Start = 'Start',
  End = 'End',
  Left = 'Left',
  Right = 'Right',
  Center = 'Center'
}
export const enum TextBaseline {
  Top = 'Top',
  Hanging = 'Hanging',
  Middle = 'Middle',
  Alphabetic = 'Alphabetic',
  Ideographic = 'Ideographic',
  Bottom = 'Bottom'
}
export const enum RepeatPattern {
  Repeat = 'Repeat',
  RepeatX = 'RepeatX',
  RepeatY = 'RepeatY',
  NoRepeat = 'NoRepeat'
}
export interface ColorStop {
  offset: number
  color: string
}
export declare function version(): string
export type HTMLCanvas = Canvas
export declare class Canvas {
  constructor(width: number, height: number)
  get width(): number
  set width(width: number)
  get height(): number
  set height(height: number)
  resize(width: number, height: number): void
  getContext2D(): CanvasRenderingContext2D
  toBuffer(mimeType?: string | undefined | null, quality?: number | undefined | null): Buffer
}
export declare class CanvasRenderingContext2D {
  clearRect(x: number, y: number, width: number, height: number): void
  fillRect(x: number, y: number, width: number, height: number): void
  strokeRect(x: number, y: number, width: number, height: number): void
  beginPath(): void
  moveTo(x: number, y: number): void
  lineTo(x: number, y: number): void
  bezierCurveTo(cp1X: number, cp1Y: number, cp2X: number, cp2Y: number, x: number, y: number): void
  quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void
  arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterClockwise?: boolean | undefined | null): void
  rect(x: number, y: number, width: number, height: number): void
  closePath(): void
  fill(): void
  stroke(): void
  set fillStyle()
  set fillStyle(value: string)
  get strokeStyle(): string
  set strokeStyle(value: string)
  get lineWidth(): number
  set lineWidth(value: number)
  fillText(text: string, x: number, y: number, maxWidth?: number | undefined | null): void
  strokeText(text: string, x: number, y: number, maxWidth?: number | undefined | null): void
  save(): void
  restore(): void
  translate(x: number, y: number): void
  rotate(angle: number): void
  scale(x: number, y: number): void
}
export declare class ImageData {
  constructor(width: number, height: number)
  static fromBuffer(data: Buffer, width: number, height?: number | undefined | null): ImageData
  get width(): number
  get height(): number
  get data(): Buffer
}
export declare class Path2D {
  constructor(path?: Path2D | undefined | null)
  addPath(path: Path2D): void
  closePath(): void
  moveTo(x: number, y: number): void
  lineTo(x: number, y: number): void
  bezierCurveTo(cp1X: number, cp1Y: number, cp2X: number, cp2Y: number, x: number, y: number): void
  quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void
  arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterClockwise?: boolean | undefined | null): void
  rect(x: number, y: number, width: number, height: number): void
  ellipse(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, counterClockwise?: boolean | undefined | null): void
}
export declare class CanvasPattern {
  constructor(imageData: ImageData, repeatPattern?: string | undefined | null)
}
export declare class LinearGradient {
  constructor(x0: number, y0: number, x1: number, y1: number)
  addColorStop(offset: number, color: string): void
}
export declare class RadialGradient {
  constructor(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number)
  addColorStop(offset: number, color: string): void
}
